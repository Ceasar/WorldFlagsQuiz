{"version":3,"sources":["Quiz.jsx","WorldFlagsQuiz.jsx","App.js","reportWebVitals.js","index.js"],"names":["QuizQuestion","choices","correctChoice","selectedChoice","stem","onClickAnswer","isAnswered","className","ListGroup","map","choice","variant","value","Item","action","onClick","key","Quiz","currentScore","maxScore","onClickNext","otherProps","Button","disabled","QuizLoader","description","errorMessage","isStarted","loading","title","onClickStartQuiz","id","href","width","height","src","class","alt","data-recalc-dims","client","ApolloClient","cache","InMemoryCache","uri","LIST_COUNTRIES","gql","questionReducer","state","type","question","scoreReducer","isCorrect","selectedChoiceReducer","isStartedReducer","quizReducer","score","WorldFlagsQuiz","useReducer","current","dispatch","useQuery","data","error","getNextQuestion","countries","countryChoices","_","sampleSize","sample","answer","name","country","code","emoji","useCallback","event","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAGA,SAASA,EAAT,GAMI,IALFC,EAKC,EALDA,QACAC,EAIC,EAJDA,cACAC,EAGC,EAHDA,eACAC,EAEC,EAFDA,KACAC,EACC,EADDA,cAEMC,EAAgC,OAAnBH,EACnB,OACE,sBAAKI,UAAU,gBAAf,UACE,qBAAKA,UAAU,qBAAf,SAAqCH,IACrC,cAACI,EAAA,EAAD,CAAWD,UAAU,eAArB,SACGN,EAAQQ,KAAI,SAAAC,GACX,IAAIC,EAAU,KAOd,OANID,EAAOE,QAAUT,IACnBQ,EAAU,UAERL,GAAcI,EAAOE,QAAUV,IACjCS,EAAU,WAGV,cAACH,EAAA,EAAUK,KAAX,CACEC,QAASR,EAETK,QAASA,EACTC,MAAOF,EAAOE,MACdG,QAASV,EALX,SAMEK,EAAOE,OAJFF,EAAOM,aAY1B,SAASC,EAAT,GAMI,IALFC,EAKC,EALDA,aACAf,EAIC,EAJDA,eACAgB,EAGC,EAHDA,SACAC,EAEC,EAFDA,YACGC,EACF,0EACKf,EAAgC,OAAnBH,EACnB,OACE,sBAAKI,UAAU,OAAf,UACE,8BAAIW,EAAJ,MAAqBC,KACrB,cAACnB,EAAD,aAAcG,eAAgBA,GAAoBkB,IAClD,qBAAKd,UAAU,gBAAf,SACE,cAACe,EAAA,EAAD,CAAQC,UAAWjB,EAAYS,QAASK,EAAaT,QAAQ,UAA7D,uBAMO,SAASa,EAAT,GAQX,IAPFC,EAOC,EAPDA,YACAC,EAMC,EANDA,aACAC,EAKC,EALDA,UACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,MACAC,EAEC,EAFDA,iBACGT,EACF,+FACD,OAAKM,EAYDC,EACK,aAELF,GAIF,cAACT,EAAD,eAAUI,IAjBR,sBAAKd,UAAU,OAAf,UACE,6BAAKsB,IACL,4BAAIJ,IACJ,cAACH,EAAA,EAAD,CAAQP,QAASe,EAAjB,wBACA,qBAAKC,GAAG,gBAAR,SACE,mBAAGC,KAAK,2CAAR,SAAmD,qBAAKJ,QAAQ,OAAOK,MAAM,MAAMC,OAAO,MAAMC,IAAI,gGAAgGC,MAAM,4BAA4BC,IAAI,oBAAoBC,mBAAiB,aCnEzR,IAAMC,EAAS,IAAIC,eAAa,CAC9BC,MAAO,IAAIC,gBACXC,IAAK,uCAGDC,EAAiBC,cAAH,mGAUpB,SAASC,EAAgBC,EAAOjC,GAC9B,OAAQA,EAAOkC,MACb,IAAK,YACL,IAAK,eACH,OAAOlC,EAAOmC,SAChB,QACE,OAAOF,GAIb,SAASG,EAAaH,EAAOjC,GAC3B,OAAQA,EAAOkC,MACb,IAAK,YACH,MAAO,CAAC9B,aAAc,EAAGC,SAAU,GACrC,IAAK,eACH,MAAO,CACLD,aAAc6B,EAAM7B,cAAgBJ,EAAOqC,UAAY,EAAI,GAC3DhC,SAAU4B,EAAM5B,SAAW,GAE/B,QACE,OAAO4B,GAIb,SAASK,EAAsBL,EAAOjC,GACpC,OAAQA,EAAOkC,MACb,IAAK,YACL,IAAK,eACH,OAAO,KACT,IAAK,eACH,OAAOlC,EAAOJ,OAChB,QACE,OAAOqC,GAIb,SAASM,EAAiBN,EAAOjC,GAC/B,OAAQA,EAAOkC,MACb,IAAK,YACH,OAAO,EACT,QACE,OAAOD,GAIb,SAASO,EAAYP,EAAOjC,GAC1B,MAAO,CACLa,UAAW0B,EAAiBN,EAAMpB,UAAWb,GAC7CmC,SAAUH,EAAgBC,EAAME,SAAUnC,GAC1CyC,MAAOL,EAAaH,EAAMQ,MAAOzC,GACjCX,eAAgBiD,EAAsBL,EAAMrC,OAAQI,IAIzC,SAAS0C,IAAkB,IAAD,EACbC,qBAAWH,EAAa,CAChD5C,OAAQ,KACRiB,WAAW,EACXsB,SAAU,GACVM,MAAO,CAACG,QAAS,EAAGvC,SAAU,KALO,mBAChC4B,EADgC,KACzBY,EADyB,OAORC,mBAAShB,EAAgB,CAACL,WAAlDsB,EAPgC,EAOhCA,KAAMjC,EAP0B,EAO1BA,QAASkC,EAPiB,EAOjBA,MAEhBC,EAAkB,SAASC,GAC/B,IAAMC,EAAiBC,IAAEC,WAAWH,EAAW,GACzC9D,EAAgBgE,IAAEE,OAAOH,GAO/B,MAAO,CAACI,OANOnE,EAAcoE,KAMbrE,QALAgE,EAAexD,KAAI,SAAA8D,GAAO,MAAK,CAC7CvD,IAAKuD,EAAQC,KACb5D,MAAO2D,EAAQD,SAGQlE,KADZF,EAAcuE,QAIvBpE,EAAgBqE,uBAAY,SAACC,GACjC,IAAMjE,EAASiE,EAAMC,OAAOhE,MAC5B+C,EAAS,CACPjD,SACAR,cAAe6C,EAAME,SAASoB,OAC9BlB,UAAWzC,IAAWqC,EAAME,SAASoB,OACrCrB,KAAM,mBAEP,CAACW,EAAUZ,IACR3B,EAAcsD,uBAAY,WAC9Bf,EAAS,CAACX,KAAM,eAAgBC,SAAUc,EAAgBF,EAAKG,eAC9D,CAACH,EAAMF,IACJ7B,EAAmB4C,uBAAY,WACnCf,EAAS,CAACX,KAAM,YAAaC,SAAUc,EAAgBF,EAAKG,eAC3D,CAACH,EAAMF,IAEV,OACE,cAAC,EAAD,CACE1D,QAAS8C,EAAME,SAAShD,QACxBC,cAAe6C,EAAME,SAASoB,OAC9BnD,aAAc6B,EAAMQ,MAAMrC,aAC1BO,YAAY,sCACZqC,MAAOA,EACPnC,UAAWoB,EAAMpB,UACjBC,QAASA,EACTT,SAAU4B,EAAMQ,MAAMpC,SACtBhB,eAAgB4C,EAAM5C,eACtBC,KAAM2C,EAAME,SAAS7C,KACrByB,MAAM,mBACNxB,cAAeA,EACfe,YAAaA,EACbU,iBAAkBA,IClHT+C,MARf,WACE,OACE,qBAAKtE,UAAU,MAAf,SACE,cAACiD,EAAD,OCISsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d9a4fa97.chunk.js","sourcesContent":["import Button from 'react-bootstrap/Button';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nfunction QuizQuestion({\n  choices,\n  correctChoice,\n  selectedChoice,\n  stem,\n  onClickAnswer,\n}) {\n  const isAnswered = selectedChoice !== null;\n  return (\n    <div className=\"quiz-question\">\n      <div className=\"quiz-question-stem\">{stem}</div>\n      <ListGroup className=\"quiz-answers\">\n        {choices.map(choice => {\n          let variant = null;\n          if (choice.value === selectedChoice) {\n            variant = \"danger\";\n          }\n          if (isAnswered && choice.value === correctChoice) {\n            variant = \"success\";\n          }\n          return (\n            <ListGroup.Item\n              action={!isAnswered}\n              key={choice.key}\n              variant={variant}\n              value={choice.value}\n              onClick={onClickAnswer}\n            >{choice.value}</ListGroup.Item>\n          );\n        })}\n      </ListGroup>\n    </div>\n  );\n}\n\nfunction Quiz({\n  currentScore,\n  selectedChoice,\n  maxScore,\n  onClickNext,\n  ...otherProps\n}) {\n  const isAnswered = selectedChoice !== null;\n  return (\n    <div className=\"quiz\">\n      <p>{currentScore} / {maxScore}</p>\n      <QuizQuestion selectedChoice={selectedChoice} {...otherProps} />\n      <div className=\"quiz-continue\">\n        <Button disabled={!isAnswered} onClick={onClickNext} variant=\"primary\">Next</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default function QuizLoader({\n  description,\n  errorMessage,\n  isStarted,\n  loading,\n  title,\n  onClickStartQuiz,\n  ...otherProps\n}) {\n  if (!isStarted) {\n    return (\n      <div className=\"quiz\">\n        <h1>{title}</h1>\n        <p>{description}</p>\n        <Button onClick={onClickStartQuiz}>Start quiz</Button>\n        <div id=\"github-ribbon\">\n          <a href=\"https://github.com/Ceasar/WorldFlagsQuiz\"><img loading=\"lazy\" width=\"149\" height=\"149\" src=\"https://github.blog/wp-content/uploads/2008/12/forkme_right_white_ffffff.png?resize=149%2C149\" class=\"attachment-full size-full\" alt=\"Fork me on GitHub\" data-recalc-dims=\"1\"/></a>\n        </div>\n      </div>\n    );\n  }\n  if (loading) {\n    return 'Loading...';\n  }\n  if (errorMessage) {\n    return errorMessage;\n  }\n  return (\n    <Quiz {...otherProps}/>\n  );\n}\n","import _ from 'lodash';\nimport React, {useCallback, useReducer} from 'react';\nimport {ApolloClient, InMemoryCache, gql, useQuery} from '@apollo/client';\n\nimport Quiz from './Quiz.jsx';\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: 'https://countries.trevorblades.com'\n});\n\nconst LIST_COUNTRIES = gql`\n  {\n    countries {\n      name\n      emoji\n      code\n    }\n  }\n`;\n\nfunction questionReducer(state, action) {\n  switch (action.type) {\n    case 'startQuiz':\n    case 'nextQuestion':\n      return action.question;\n    default:\n      return state;\n  }\n}\n\nfunction scoreReducer(state, action) {\n  switch (action.type) {\n    case 'startQuiz':\n      return {currentScore: 0, maxScore: 0}\n    case 'chooseAnswer':\n      return {\n        currentScore: state.currentScore + (action.isCorrect ? 1 : 0),\n        maxScore: state.maxScore + 1,\n      };\n    default:\n      return state;\n  }\n}\n\nfunction selectedChoiceReducer(state, action) {\n  switch (action.type) {\n    case 'startQuiz':\n    case 'nextQuestion':\n      return null;\n    case 'chooseAnswer':\n      return action.choice\n    default:\n      return state\n  }\n}\n\nfunction isStartedReducer(state, action) {\n  switch (action.type) {\n    case 'startQuiz':\n      return true;\n    default:\n      return state;\n  }\n}\n\nfunction quizReducer(state, action) {\n  return {\n    isStarted: isStartedReducer(state.isStarted, action),\n    question: questionReducer(state.question, action),\n    score: scoreReducer(state.score, action),\n    selectedChoice: selectedChoiceReducer(state.choice, action),\n  };\n}\n\nexport default function WorldFlagsQuiz() {\n  const [state, dispatch] = useReducer(quizReducer, {\n    choice: null,\n    isStarted: false,\n    question: {},\n    score: {current: 0, maxScore: 0},\n  });\n  const {data, loading, error} = useQuery(LIST_COUNTRIES, {client});\n\n  const getNextQuestion = function(countries) {\n    const countryChoices = _.sampleSize(countries, 4);\n    const correctChoice = _.sample(countryChoices)\n    const answer = correctChoice.name;\n    const choices = countryChoices.map(country => ({\n      key: country.code,\n      value: country.name,\n    }));\n    const stem = correctChoice.emoji;\n    return {answer, choices, stem}\n  };\n\n  const onClickAnswer = useCallback((event) => {\n    const choice = event.target.value;\n    dispatch({\n      choice,\n      correctChoice: state.question.answer,\n      isCorrect: choice === state.question.answer,\n      type: 'chooseAnswer',\n    });\n  }, [dispatch, state]);\n  const onClickNext = useCallback(() => {\n    dispatch({type: 'nextQuestion', question: getNextQuestion(data.countries)});\n  }, [data, dispatch]);\n  const onClickStartQuiz = useCallback(() => {\n    dispatch({type: 'startQuiz', question: getNextQuestion(data.countries)});\n  }, [data, dispatch]);\n\n  return (\n    <Quiz\n      choices={state.question.choices}\n      correctChoice={state.question.answer}\n      currentScore={state.score.currentScore}\n      description=\"Test your knowledge of world flags.\"\n      error={error}\n      isStarted={state.isStarted}\n      loading={loading}\n      maxScore={state.score.maxScore}\n      selectedChoice={state.selectedChoice}\n      stem={state.question.stem}\n      title=\"World Flags Quiz\"\n      onClickAnswer={onClickAnswer}\n      onClickNext={onClickNext}\n      onClickStartQuiz={onClickStartQuiz}\n    />\n  )\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\nimport WorldFlagsQuiz from './WorldFlagsQuiz.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WorldFlagsQuiz />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}