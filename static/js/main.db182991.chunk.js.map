{"version":3,"sources":["QuizQuestion.jsx","QuizPage.jsx","Quiz.jsx","WorldFlagsQuiz.jsx","App.js","reportWebVitals.js","index.js"],"names":["QuizQuestion","answer","choices","selectedChoice","stem","onClickAnswer","isAnswered","className","ListGroup","map","choice","variant","Item","action","value","onClick","QuizPage","questionNumber","score","totalQuestions","onClickNext","otherProps","Button","disabled","QuizCover","title","description","onClickStartQuiz","id","href","loading","width","height","src","alt","data-recalc-dims","QuizResults","Quiz","isComplete","isStarted","questionNumberReducer","state","type","scoreReducer","isCorrect","selectedChoiceReducer","isStartedReducer","quizReducer","QUIZ_INITIAL_STATE","QuizApp","questions","useReducer","dispatch","question","useMemo","useCallback","event","target","length","client","ApolloClient","cache","InMemoryCache","uri","LIST_COUNTRIES","gql","WorldFlagsQuiz","useQuery","data","error","countries","numChoices","_","shuffle","country","name","distractors","sampleSize","filter","countryName","slice","concat","emoji","message","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAEe,SAASA,EAAT,GAMX,IALFC,EAKC,EALDA,OACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,eACAC,EAEC,EAFDA,KACAC,EACC,EADDA,cAEMC,EAAgC,OAAnBH,EACnB,OACE,sBAAKI,UAAU,gBAAf,UACE,qBAAKA,UAAU,qBAAf,SAAqCH,IACrC,cAACI,EAAA,EAAD,CAAWD,UAAU,eAArB,SACGL,EAAQO,KAAI,SAAAC,GACX,IAAIC,EAAU,KAOd,OANID,IAAWP,IACbQ,EAAU,UAERL,GAAcI,IAAWT,IAC3BU,EAAU,WAGV,cAACH,EAAA,EAAUI,KAAX,CACEC,QAASP,EAETK,QAASA,EACTG,MAAOJ,EACPK,QAASV,EALX,SAMEK,GAJKA,WCrBJ,SAASM,EAAT,GAOX,IANFC,EAMC,EANDA,eACAd,EAKC,EALDA,eACAe,EAIC,EAJDA,MACAC,EAGC,EAHDA,eACAC,EAEC,EAFDA,YACGC,EACF,0FACKf,EAAgC,OAAnBH,EACnB,OACE,sBAAKI,UAAU,OAAf,UACE,sBAAKA,UAAU,uBAAf,uBAAiDU,EAAiB,EAAlE,MAAwEE,KACxE,0CAAaD,KACb,cAAClB,EAAD,aAAcG,eAAgBA,GAAoBkB,IAClD,qBAAKd,UAAU,gBAAf,SACE,cAACe,EAAA,EAAD,CAAQC,UAAWjB,EAAYS,QAASK,EAAaT,QAAQ,UAA7D,uBCdR,SAASa,EAAT,GAKI,IAJFC,EAIC,EAJDA,MACAC,EAGC,EAHDA,YACAH,EAEC,EAFDA,SACAI,EACC,EADDA,iBAEA,OACE,sBAAKpB,UAAU,OAAf,UACE,6BAAKkB,IACL,4BAAIC,IACJ,cAACJ,EAAA,EAAD,CACEC,SAAUA,EACVR,QAASY,EAFX,wBAIA,qBAAKC,GAAG,gBAAR,SACE,mBAAGC,KAAK,2CAAR,SAAmD,qBAAKC,QAAQ,OAAOC,MAAM,MAAMC,OAAO,MAAMC,IAAI,gGAAgG1B,UAAU,4BAA4B2B,IAAI,oBAAoBC,mBAAiB,aAM3R,SAASC,EAAT,GAII,IAHFlB,EAGC,EAHDA,MACAC,EAEC,EAFDA,eACAQ,EACC,EADDA,iBAEA,OACE,sBAAKpB,UAAU,OAAf,UACE,gDACA,8CAAiBW,EAAjB,MAA2BC,KAC3B,cAACG,EAAA,EAAD,CAAQP,QAASY,EAAjB,2BAKC,SAASU,EAAT,GASH,IARFX,EAQC,EARDA,YACAY,EAOC,EAPDA,WACAC,EAMC,EANDA,UACArB,EAKC,EALDA,MACAO,EAIC,EAJDA,MACAN,EAGC,EAHDA,eACAQ,EAEC,EAFDA,iBACGN,EACF,4GACD,OAAKkB,EAUDD,EAEA,cAACF,EAAD,CACElB,MAAOA,EACPC,eAAgBA,EAChBQ,iBAAkBA,IAKtB,cAACX,EAAD,aAAUE,MAAOA,EAAOC,eAAgBA,GAAoBE,IAlB1D,cAACG,EAAD,CACEC,MAAOA,EACPC,YAAaA,EACbH,SAA6B,IAAnBJ,EACVQ,iBAAkBA,IAkB1B,SAASa,EAAsBC,EAAO5B,GACpC,OAAQA,EAAO6B,MACb,IAAK,YACH,OAAO,EACT,IAAK,eACH,OAAOD,EAAQ,EACjB,QACE,OAAOA,GAIb,SAASE,EAAaF,EAAO5B,GAC3B,OAAQA,EAAO6B,MACb,IAAK,YACH,OAAO,EACT,IAAK,eACH,OAAOD,GAAS5B,EAAO+B,UAAY,EAAI,GACzC,QACE,OAAOH,GAIb,SAASI,EAAsBJ,EAAO5B,GACpC,OAAQA,EAAO6B,MACb,IAAK,YACL,IAAK,eACH,OAAO,KACT,IAAK,eACH,OAAO7B,EAAOH,OAChB,QACE,OAAO+B,GAIb,SAASK,EAAiBL,EAAO5B,GAC/B,OAAQA,EAAO6B,MACb,IAAK,YACH,OAAO,EACT,QACE,OAAOD,GAIb,SAASM,EAAYN,EAAO5B,GAC1B,MAAO,CACL0B,UAAWO,EAAiBL,EAAMF,UAAW1B,GAC7CI,eAAgBuB,EAAsBC,EAAMxB,eAAgBJ,GAC5DK,MAAOyB,EAAaF,EAAMvB,MAAOL,GACjCV,eAAgB0C,EAAsBJ,EAAM/B,OAAQG,IAIxD,I,EAAMmC,EAAqB,CACzBT,WAAW,EACXtB,eAAgB,EAChBC,MAAO,EACPf,eAAgB,MAGH,SAAS8C,EAAT,GAIX,IAHFvB,EAGC,EAHDA,YACAwB,EAEC,EAFDA,UACAzB,EACC,EADDA,MACC,EACyB0B,qBAAWJ,EAAaC,GADjD,mBACMP,EADN,KACaW,EADb,KAGKC,EAAWC,mBACf,kBAAOJ,EAAUT,EAAMxB,iBAAmB,KACzC,CAACiC,EAAWT,EAAMxB,iBAEfZ,EAAgBkD,uBAAY,SAACC,GACjC,IAAM9C,EAAS8C,EAAMC,OAAO3C,MAC5BsC,EAAS,CACP1C,SACAkC,UAAWlC,IAAW2C,EAASpD,OAC/ByC,KAAM,mBAEP,CAACU,EAAUC,IACRjC,EAAcmC,uBAAY,WAC9BH,EAAS,CAACV,KAAM,mBACf,CAACU,IACEzB,EAAmB4B,uBAAY,WACnCH,EAAS,CAACV,KAAM,gBACf,CAACU,IAEJ,OACE,cAACf,EAAD,CACEpC,OAAQoD,EAASpD,OACjBC,QAASmD,EAASnD,QAClBwB,YAAaA,EACbY,WAAYG,EAAMxB,gBAAkBiC,EAAUQ,OAC9CnB,UAAWE,EAAMF,UACjBtB,eAAgBwB,EAAMxB,eACtBd,eAAgBsC,EAAMtC,eACtBe,MAAOuB,EAAMvB,MACbd,KAAMiD,EAASjD,KACfqB,MAAOA,EACPN,eAAgB+B,EAAUQ,OAC1BrD,cAAeA,EACfe,YAAaA,EACbO,iBAAkBA,ICxKxB,IAAMgC,EAAS,IAAIC,eAAa,CAC9BC,MAAO,IAAIC,gBACXC,IAAK,uCAGDC,EAAiBC,cAAH,uFAuBL,SAASC,IAAkB,IAAD,EACRC,mBAASH,EAAgB,CAACL,WAAlDS,EADgC,EAChCA,KAAeC,GADiB,EAC1BvC,QAD0B,EACjBuC,OAEhBnB,EAAYI,mBAChB,kBAAOc,GAlBYE,EAkBSF,EAAKE,UAlBHC,EAkBc,EAjBvCC,IAAEC,QAAQH,GAAW7D,KAAI,SAAAiE,GAC9B,IAAMzE,EAASyE,EAAQC,KACjBC,EAAcJ,IAAEK,WAAWP,EAAWC,GAAY9D,KACtD,SAAAiE,GAAO,OAAIA,EAAQC,QACnBG,QACA,SAAAC,GAAW,OAAIA,IAAgB9E,KAC/B+E,MAAM,EAAGT,EAAa,GAClBrE,EAAUsE,IAAEC,QAAQG,EAAYK,OAAOP,EAAQC,OAC/CvE,EAAOsE,EAAQQ,MACrB,MAAO,CAACjF,SAAQC,UAASE,YAQwB,GAlBrD,IAAuBkE,EAAWC,IAmB9B,CAACH,IAGH,OAAOC,EAAQA,EAAMc,QACnB,cAAC,EAAD,CACEzD,YAAY,sCACZwB,UAAWA,EACXzB,MAAM,qBCjCG2D,MARf,WACE,OACE,qBAAK7E,UAAU,MAAf,SACE,cAAC2D,EAAD,OCISmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.db182991.chunk.js","sourcesContent":["import ListGroup from 'react-bootstrap/ListGroup';\n\nexport default function QuizQuestion({\n  answer,\n  choices,\n  selectedChoice,\n  stem,\n  onClickAnswer,\n}) {\n  const isAnswered = selectedChoice !== null;\n  return (\n    <div className=\"quiz-question\">\n      <div className=\"quiz-question-stem\">{stem}</div>\n      <ListGroup className=\"quiz-answers\">\n        {choices.map(choice => {\n          let variant = null;\n          if (choice === selectedChoice) {\n            variant = \"danger\";\n          }\n          if (isAnswered && choice === answer) {\n            variant = \"success\";\n          }\n          return (\n            <ListGroup.Item\n              action={!isAnswered}\n              key={choice}\n              variant={variant}\n              value={choice}\n              onClick={onClickAnswer}\n            >{choice}</ListGroup.Item>\n          );\n        })}\n      </ListGroup>\n    </div>\n  );\n}\n","import Button from 'react-bootstrap/Button';\n\nimport QuizQuestion from './QuizQuestion.jsx';\n\nexport default function QuizPage({\n  questionNumber,\n  selectedChoice,\n  score,\n  totalQuestions,\n  onClickNext,\n  ...otherProps\n}) {\n  const isAnswered = selectedChoice !== null;\n  return (\n    <div className=\"quiz\">\n      <div className=\"quiz-question-number\">Question: {questionNumber + 1} / {totalQuestions}</div>\n      <div>Score: {score}</div>\n      <QuizQuestion selectedChoice={selectedChoice} {...otherProps} />\n      <div className=\"quiz-continue\">\n        <Button disabled={!isAnswered} onClick={onClickNext} variant=\"primary\">Next</Button>\n      </div>\n    </div>\n  );\n}\n","import React, {useCallback, useMemo, useReducer} from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport QuizPage from './QuizPage.jsx';\n\nfunction QuizCover({\n  title,\n  description,\n  disabled,\n  onClickStartQuiz,\n}) {\n  return (\n    <div className=\"quiz\">\n      <h1>{title}</h1>\n      <p>{description}</p>\n      <Button\n        disabled={disabled}\n        onClick={onClickStartQuiz}\n      >Start quiz</Button>\n      <div id=\"github-ribbon\">\n        <a href=\"https://github.com/Ceasar/WorldFlagsQuiz\"><img loading=\"lazy\" width=\"149\" height=\"149\" src=\"https://github.blog/wp-content/uploads/2008/12/forkme_right_white_ffffff.png?resize=149%2C149\" className=\"attachment-full size-full\" alt=\"Fork me on GitHub\" data-recalc-dims=\"1\"/></a>\n      </div>\n    </div>\n  );\n}\n\nfunction QuizResults({\n  score,\n  totalQuestions,\n  onClickStartQuiz,\n}) {\n  return (\n    <div className=\"quiz\">\n      <h1>Quiz Complete!</h1>\n      <p>Final Score: {score} / {totalQuestions}</p>\n      <Button onClick={onClickStartQuiz}>Play again</Button>\n    </div>\n  );\n}\n\nexport function Quiz({\n  description,\n  isComplete,\n  isStarted,\n  score,\n  title,\n  totalQuestions,\n  onClickStartQuiz,\n  ...otherProps\n}) {\n  if (!isStarted) {\n    return (\n      <QuizCover\n        title={title}\n        description={description}\n        disabled={totalQuestions === 0}\n        onClickStartQuiz={onClickStartQuiz}\n      />\n    );\n  }\n  if (isComplete) {\n    return (\n      <QuizResults\n        score={score}\n        totalQuestions={totalQuestions}\n        onClickStartQuiz={onClickStartQuiz}\n      />\n    );\n  }\n  return (\n    <QuizPage score={score} totalQuestions={totalQuestions} {...otherProps}/>\n  );\n}\n\nfunction questionNumberReducer(state, action) {\n  switch (action.type) {\n    case 'startQuiz':\n      return 0;\n    case 'nextQuestion':\n      return state + 1;\n    default:\n      return state;\n  }\n}\n\nfunction scoreReducer(state, action) {\n  switch (action.type) {\n    case 'startQuiz':\n      return 0;\n    case 'chooseAnswer':\n      return state + (action.isCorrect ? 1 : 0);\n    default:\n      return state;\n  }\n}\n\nfunction selectedChoiceReducer(state, action) {\n  switch (action.type) {\n    case 'startQuiz':\n    case 'nextQuestion':\n      return null;\n    case 'chooseAnswer':\n      return action.choice\n    default:\n      return state\n  }\n}\n\nfunction isStartedReducer(state, action) {\n  switch (action.type) {\n    case 'startQuiz':\n      return true;\n    default:\n      return state;\n  }\n}\n\nfunction quizReducer(state, action) {\n  return {\n    isStarted: isStartedReducer(state.isStarted, action),\n    questionNumber: questionNumberReducer(state.questionNumber, action),\n    score: scoreReducer(state.score, action),\n    selectedChoice: selectedChoiceReducer(state.choice, action),\n  };\n}\n\nconst QUIZ_INITIAL_STATE = {\n  isStarted: false,\n  questionNumber: 0,\n  score: 0,\n  selectedChoice: null,\n};\n\nexport default function QuizApp({\n  description,\n  questions,\n  title,\n}) {\n  const [state, dispatch] = useReducer(quizReducer, QUIZ_INITIAL_STATE);\n\n  const question = useMemo((\n    () => (questions[state.questionNumber] || {})\n  ), [questions, state.questionNumber]);\n\n  const onClickAnswer = useCallback((event) => {\n    const choice = event.target.value;\n    dispatch({\n      choice,\n      isCorrect: choice === question.answer,\n      type: 'chooseAnswer',\n    });\n  }, [dispatch, question]);\n  const onClickNext = useCallback(() => {\n    dispatch({type: 'nextQuestion'});\n  }, [dispatch]);\n  const onClickStartQuiz = useCallback(() => {\n    dispatch({type: 'startQuiz'});\n  }, [dispatch]);\n\n  return (\n    <Quiz\n      answer={question.answer}\n      choices={question.choices}\n      description={description}\n      isComplete={state.questionNumber >= questions.length}\n      isStarted={state.isStarted}\n      questionNumber={state.questionNumber}\n      selectedChoice={state.selectedChoice}\n      score={state.score}\n      stem={question.stem}\n      title={title}\n      totalQuestions={questions.length}\n      onClickAnswer={onClickAnswer}\n      onClickNext={onClickNext}\n      onClickStartQuiz={onClickStartQuiz}\n    />\n  );\n}\n","import _ from 'lodash';\nimport React, {useMemo} from 'react';\nimport {ApolloClient, InMemoryCache, gql, useQuery} from '@apollo/client';\n\nimport Quiz from './Quiz.jsx';\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: 'https://countries.trevorblades.com'\n});\n\nconst LIST_COUNTRIES = gql`\n  {\n    countries {\n      name\n      emoji\n    }\n  }\n`;\n\nfunction makeQuestions(countries, numChoices) {\n  return _.shuffle(countries).map(country => {\n    const answer = country.name;\n    const distractors = _.sampleSize(countries, numChoices).map(\n      country => country.name\n    ).filter(\n      countryName => countryName !== answer\n    ).slice(0, numChoices - 1);\n    const choices = _.shuffle(distractors.concat(country.name));\n    const stem = country.emoji;\n    return {answer, choices, stem}\n  });\n}\n\nexport default function WorldFlagsQuiz() {\n  const {data, loading, error} = useQuery(LIST_COUNTRIES, {client});\n\n  const questions = useMemo(\n    () => (data ? makeQuestions(data.countries, 4) : []),\n    [data]\n  );\n\n  return error ? error.message : (\n    <Quiz\n      description=\"Test your knowledge of world flags.\"\n      questions={questions}\n      title=\"World Flags Quiz\"\n    />\n  );\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\nimport WorldFlagsQuiz from './WorldFlagsQuiz.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WorldFlagsQuiz />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}